[{"content":"欢迎来到 Cukoo 码字的地方\n","date":null,"permalink":"/","section":"","summary":"欢迎来到 Cukoo 码字的地方","title":""},{"content":"[TOC]\n前言 #在开发中，我们经常会使用到第三方库，以避免造轮子，从而提高开发效率。在C++中，要使用第三方库，首先需要进行以下步骤：\n获取库文件和头文件 告知编译器头文件的所在目录 告知编译器库文件的所在目录 告知编译器要链接的库文件 对于某些第三方开源库，官方并没有提供编译好的库文件，此时就需要自己动手编译，得到适合于自己平台下的库文件。\n出于毕业要求的需要，笔者前段时间写了一个软著，其中某些功能的实现需要用到gdal。而gdal就属于上述所说的“需要自己动手编译”的开源库，当然你也可以去寻找别人已经编译好的库文件。\n搭建使用第三方库的C++开发环境的核心原理是固定的，也就是上述提到的4个步骤，但具体操作因平台而异。以下将对“Windows下的gdal开发环境搭建过程”做一个记录，以供自己学习之用，也希望能够帮到有需要的人。\n基于vcpkg的gdal库编译 #\rvcpkg是微软推出的开源的C/C++库管理器，它能够自动为我们处理库编译所需的各种依赖关系，就像是Python中的miniconda。\n下载vcpkg\n使用git-bash中执行以下命令，以下载vcpkg。\ngit clone https://github.com/microsoft/vcpkg.git 如果你没有git，打开上述命令中的网址，点击\u0026quot;Code\u0026quot;-\u0026ldquo;Download ZIP\u0026rdquo;，下载后解压即可。\n使用vcpkg进行gdal库编译\n在vcpkg文件夹的上级目录中，使用命令提示符(cmd)依次执行以下命令。\n.\\vcpkg\\bootstrap-vcpkg.bat .\\vcpkg\\vcpkg install gdal:x64-windows 接下来，可以喝杯茶、摸会儿鱼，等待编译完成。编译耗时因电脑性能而异，在笔者的电脑中，耗时42分钟。\n查看库文件和头文件\n进入vcpkg/installed/x64-windows\nbin和lib文件夹中分别存放着适用于Relese模式下的动态库文件(.dll)和静态库文件(.lib) debug中的bin和lib文件夹分别存放着适用于Debug模式下的动态库文件(.dll)和静态库文件(.lib) include文件夹中存放着头文件 以上就是基于vcpkg进行gdal库编译的操作过程，本文没有对相关命令进行讲解，更多详细信息请参考\rvcpkg的GitHub仓库。\nVisual Studio项目属性设置 #打开Visual Studio，创建一个C++空项目，在项目中添加一个.cpp文件。随后，在项目右键菜单中点击“属性”，将弹出如下图所示的“[项目名]属性页”。\n在设置项目属性之前，我们可以先将库文件和头文件放到项目文件夹中，这样在后续的项目设置中，就可以尽量使用相对路径。这样做的好处是，当我们将整个项目打包，放到其他电脑中打开时，就不用修改项目属性了。\n在解决方案目录下新建名为\u0026quot;gdal\u0026quot;的文件夹\n将vcpkg/installed/x64-windows下的\u0026quot;bin\u0026quot;、\u0026ldquo;debug\u0026rdquo;、\u0026ldquo;include\u0026rdquo;、\u0026ldquo;lib\u0026quot;文件夹拷贝至刚刚新建的\u0026quot;gdal\u0026quot;文件夹中\n接下来我们正式开始进行项目属性设置（以Debug配置为例）\n设置附加包含目录 - 告知编译器头文件的所在目录\n在\u0026quot;C/C++\u0026rdquo;-\u0026ldquo;常规\u0026rdquo;-\u0026ldquo;附加包含目录\u0026quot;中填写$(SolutionDir)gdal\\include\n设置附加库目录 - 告知编译器.lib库文件的所在目录\n在\u0026quot;链接器\u0026rdquo;-\u0026ldquo;常规\u0026rdquo;-\u0026ldquo;附加库目录\u0026quot;中填写$(SolutionDir)gdal\\debug\\lib\n设置环境 - 告知编译器.dll库文件的所在目录\n在\u0026quot;调试\u0026rdquo;-\u0026ldquo;环境\u0026quot;中填写Path = $(SolutionDir)gdal\\debug\\bin\n设置附加依赖项 - 告知编译器要链接的库文件\n在\u0026quot;链接器\u0026rdquo;-\u0026ldquo;输入\u0026rdquo;-\u0026ldquo;附加依赖项\u0026quot;中填写gdald.lib\n最后点击确定，项目属性设置完毕。\n测试 #在main.cpp文件中输入如下代码，注意要将第7行的文件路径改成你自己的，第13行的函数实参也要做相应的修改。\n#include \u0026#34;ogrsf_frmts.h\u0026#34; #include \u0026lt;iostream\u0026gt; using namespace std; int main() { GDALAllRegister();\t// 自动注册所有驱动，只能读不能写 GDALDataset* poDS = static_cast\u0026lt;GDALDataset*\u0026gt;(GDALOpenEx( \u0026#34;./data/point.shp\u0026#34;, GDAL_OF_VECTOR, nullptr, nullptr, nullptr));\t// 创建Dataset if (poDS == nullptr) { cout \u0026lt;\u0026lt; \u0026#34;open failed.\u0026#34; \u0026lt;\u0026lt; endl; exit(1); } OGRLayer* poLayer = poDS-\u0026gt;GetLayerByName(\u0026#34;point\u0026#34;);\t// 获取Layer，shapefile格式的LayerName就是文件名 OGRFeatureDefn* poFDefn = poLayer-\u0026gt;GetLayerDefn();\t// 获取Layer的定义（包含Geometry和Field的定义） poLayer-\u0026gt;ResetReading();\t// 重置游标 OGRFeature* poFeature; while ((poFeature = poLayer-\u0026gt;GetNextFeature()) != nullptr) {\t// 输出Layer中所有Feature的字段值 for (int iField = 0; iField \u0026lt; poFDefn-\u0026gt;GetFieldCount(); ++iField) { OGRFieldDefn* poFieldDefn = poFDefn-\u0026gt;GetFieldDefn(iField); switch (poFieldDefn-\u0026gt;GetType()) { case OFTInteger: printf(\u0026#34;%d,\u0026#34;, poFeature-\u0026gt;GetFieldAsInteger(iField)); break; case OFTInteger64: printf(CPL_FRMT_GIB \u0026#34;,\u0026#34;, poFeature-\u0026gt;GetFieldAsInteger64(iField)); break; case OFTReal: printf(\u0026#34;%.3f,\u0026#34;, poFeature-\u0026gt;GetFieldAsDouble(iField)); break; case OFTString: printf(\u0026#34;%s,\u0026#34;, poFeature-\u0026gt;GetFieldAsString(iField)); break; default: printf(\u0026#34;%s,\u0026#34;, poFeature-\u0026gt;GetFieldAsString(iField)); break; } } cout \u0026lt;\u0026lt; endl; OGRFeature::DestroyFeature(poFeature);\t// GetNextFeature()返回的似乎是一个对象的拷贝，因此需要自行销毁 } return 0; } 点击“开始调试”，不出意外的话，程序可以正常运行。\n但是，控制台首行会提示\u0026quot;Cannot find proj.db\u0026rdquo;，所谓的\u0026quot;proj.db\u0026quot;实际存放在vcpkg\\installed\\x64-windows\\share\\proj中，我们可以使用以下两种方式让程序找到它。\n利用名为\u0026quot;PROJ_LIB\u0026quot;的环境变量，指明\u0026quot;proj.db\u0026quot;所在目录 将\u0026quot;proj.db\u0026quot;拷贝到项目目录以及可执行文件所在目录 ","date":"2024年2月17日","permalink":"/posts/gdal_c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/gdal_c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","section":"文章","summary":"[TOC]","title":"gdal_C++开发环境搭建"},{"content":"收录我将脑海中的想法转录成通俗文字的尝试\n","date":null,"permalink":"/posts/","section":"文章","summary":"收录我将脑海中的想法转录成通俗文字的尝试","title":"文章"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/categories/","section":"分类","summary":"","title":"分类"},{"content":"","date":null,"permalink":"/about/","section":"关于我","summary":"","title":"关于我"}]