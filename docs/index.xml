<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cukoo&#39;s Blog</title>
    <link>https://cukoohhh.cn/</link>
    <description>Recent content on Cukoo&#39;s Blog</description>
    <image>
      <title>Cukoo&#39;s Blog</title>
      <url>https://cukoohhh.cn/images/papermod-cover.png</url>
      <link>https://cukoohhh.cn/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 29 Mar 2024 19:39:32 +0800</lastBuildDate>
    <atom:link href="https://cukoohhh.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KMP算法</title>
      <link>https://cukoohhh.cn/posts/kmp%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 29 Mar 2024 19:39:32 +0800</pubDate>
      <guid>https://cukoohhh.cn/posts/kmp%E7%AE%97%E6%B3%95/</guid>
      <description>KMP算法是著名的字符串匹配算法。所谓字符串匹配，其实就是子串（常称为模式串）的定位操作，它求的是模式串在主串中的位置。
对朴素模式匹配算法的改进 对于字符串匹配问题，我们很容易想到暴力解法（即朴素模式匹配算法）：枚举主串中的每一个位置，考虑以其作为起点，与模式串中对应位置的元素进行匹配。一旦在某个位置匹配不上（失配），就考虑以下一个位置为起点，重新与模式串进行匹配，如此反复进行。
很显然，朴素模式匹配算法的时间复杂度为$O(n×m)$。
int strStr(string haystack, string needle) { for (int i = 0; i + needle.size() &amp;lt;= haystack.size(); ++i) { bool flag = true; for (int j = 0; j &amp;lt; needle.size(); ++j) { if (haystack[i + j] != needle[j]) { flag = false; break; } } if (flag) return i; } return -1; } 朴素模式匹配算法的思想真的很朴素——不管在什么位置，只要发生失配，都选择以主串起点的下一个位置作为新起点，与模式串从头开始匹配。但这真的有必要吗？换句话说，发生失配时，我们真的需要以下一个位置为起点从头再来吗？是否有更好的选择呢？肯定是有的，下面我们来分析一下。
以下图为例，当我们在模式串下标为5的位置发生失配时，主串中对应于子串前面的部分（即主串下标为3到7的部分）的内容，我们是知道的。因为这些位置跟与模式串是匹配的。
按照暴力解法，接下来的一轮匹配操作将如下图所示。我们可以把这一轮匹配操作分为两个部分：首先是与主串中已知部分的匹配（橙色部分），然后是与主串中未知部分匹配（绿色部分）。对于橙色部分，实际上就相当于拿着模式串中0到4子串(&amp;quot;abaab&amp;quot;)的长度为4的前缀(&amp;quot;abaa&amp;quot;)和长度为4的后缀(&amp;quot;baab&amp;quot;)进行匹配。但这个结果我们是可以事先计算好的，因为它只与模式串相关，而且模式串本身较短，计算量并不大。如果我们事先已经知道&amp;quot;abaab&amp;quot;长度为4的前后缀不相等，我们就完全没必要考虑以主串位置4为起点。
同理，以主串位置5为起点也是没有必要的，因为&amp;quot;abaab&amp;quot;长度为3的前后缀并不相等。
但以主串位置6为起点是有必要的，因为&amp;quot;abaab&amp;quot;长度为2的前后缀是相等的，都是&amp;quot;ab&amp;quot;。此时，我们应该从子串下标为2的位置开始匹配，如下图所示：
从上述例子中，我们可以归纳出如下解决方案，它适用于在模式串各个位置发生失配的情况：
当在模式串下标为j的位置与主串位置i发生失配时，指针j可以直接跳转到某一下标重新与主串的当前位置i进行比较，这个下标等于模式串中0到j - 1子串的最长相等前后缀长度。如下图所示：
因此，我们只需要事先计算出模式串中0到j - 1子串的最长相等前后缀长度，就能省去朴素模式匹配算法中许多不必要的比较操作。这就是KMP算法的核心思想。
KMP算法核心思想 KMP算法的核心思想可总结为如下两点：</description>
    </item>
    <item>
      <title>手写shared_ptr</title>
      <link>https://cukoohhh.cn/posts/%E6%89%8B%E5%86%99shared-ptr/</link>
      <pubDate>Mon, 11 Mar 2024 23:07:08 +0800</pubDate>
      <guid>https://cukoohhh.cn/posts/%E6%89%8B%E5%86%99shared-ptr/</guid>
      <description>手写shared_ptr是面试的常考点，提前准备一下吧。
shared_ptr的关键特性 首先明确shared_ptr的关键特性：
允许多个shared_ptr指向同一个对象 每个shared_ptr都有一个关联的引用计数，用于记录总共有多少个shared_ptr指向相同的对象 一旦一个shared_ptr所关联的引用计数变为0，它就会自动释放自己所管理的对象 代码思路 显然，最关键的就是要实现引用计数这个机制，大致思路如下：
在堆中创建一个整型对象作为引用计数 在拷贝或赋值时修改引用计数 在析构函数中递减引用计数，并考察它是否变为0，如果变为0，则释放所指向的对象以及引用计数对象 代码实现 #include &amp;lt;iostream&amp;gt; template &amp;lt;typename T&amp;gt; class TinySharedPtr { public: // 构造函数 explicit TinySharedPtr(T* ptr = nullptr) : ptr_(ptr) { if (ptr_) count_ = new int(1); } // 拷贝构造函数 TinySharedPtr(const TinySharedPtr&amp;amp; other) : ptr_(other.ptr_), count_(other.count_) { if (count_) ++*count_; } // 拷贝赋值运算符 TinySharedPtr&amp;amp; operator=(TinySharedPtr other) { std::swap(ptr_, other.ptr_); std::swap(count_, other.count_); return *this; } // 析构函数 ~TinySharedPtr() { if (count_ &amp;amp;&amp;amp; --(*count_) == 0) { delete ptr_; delete count_; } } T* get() { return ptr_; } T* operator-&amp;gt;() { return ptr_; } T&amp;amp; operator*() { return *ptr_; } int use_count() { return count_ ?</description>
    </item>
    <item>
      <title>常见的内部排序算法总结</title>
      <link>https://cukoohhh.cn/posts/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 26 Feb 2024 16:32:19 +0800</pubDate>
      <guid>https://cukoohhh.cn/posts/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>内部排序算法是面试中的常考点，其中快速排序和归并排序是重点。
以下是我对常见的内部排序算法的简单总结，仅供自己复习之用，不涉及详细的算法讲解。
插入排序 插入排序是一种简单直观的排序方法，其基本思想是每次将一个待排序的元素按其关键字大小插入到前面已排好序的子表中，直到全部元素插入完成。
由插入排序的思想可以引申出三个重要的排序算法：直接插入排序、折半插入排序、希尔排序。
直接插入排序 算法思想
初始时将第一个元素视为已排好序的子表，然后依次将后面的元素插入到已排好序的子表中。
算法实现
void StraightInsertionSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) { // 将各元素插入到前面排好序的子表中 for (int i = 1; i &amp;lt; nums.size(); ++i) { int temp = nums[i]; int j; // 前面排好序的子表中比待插入元素大的都要向后挪一个位置 for (j = i - 1; j &amp;gt;= 0 &amp;amp;&amp;amp; nums[j] &amp;gt; temp; --j) nums[j + 1] = nums[j]; // 将待插入元素复制到插入位置 nums[j + 1] = temp; } } 算法分析
空间复杂度$O(1)$ 时间复杂度$O(n^2)$ 稳定性：稳定 折半插入排序 算法思想
当排序表是顺序表时，可以对直接插入排序算法做如下改进：使用折半查找来确定待插入位置，然后再统一地向后移动元素。
算法实现
void BinaryInsertionSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) { for (int i = 1; i &amp;lt; nums.</description>
    </item>
    <item>
      <title>gdal C&#43;&#43;开发环境搭建</title>
      <link>https://cukoohhh.cn/posts/gdal-c&#43;&#43;%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 17 Feb 2024 02:17:18 +0800</pubDate>
      <guid>https://cukoohhh.cn/posts/gdal-c&#43;&#43;%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>前言 在开发中，我们经常会使用到第三方库，以避免造轮子，从而提高开发效率。在C++中使用第三方库，首先需要进行以下步骤：
获取库文件和头文件 告知编译器头文件的所在目录 告知编译器库文件的所在目录 告知编译器要链接的库文件 库文件的获取主要有两种方式：
库厂商有提供库文件，自行选择所需版本下载即可 库厂商没有提供库文件，但开放了源代码，此时就需要自己根据源代码进行编译，得到所需的库文件 所有的库文件都提供有相应的头文件作为调用它的接口。换言之，我们在拿到库文件的同时，也拿到了头文件。
搭建使用第三方库的C++开发环境的核心步骤是固定的，也就是上述提到的4个步骤，但具体操作因平台和开发工具而异。
前段时间一直忙于软著的开发，其中涉及到了gdal库的调用。以下将分享我个人在搭建gdal C++开发环境时所做的记录，希望能够帮到有需要的人。
基于vcpkg的gdal库编译 vcpkg是微软推出的开源的C/C++库管理器，它能够自动为我们处理库编译所需的各种依赖关系，就像是Python中的miniconda。
下载vcpkg
使用git-bash中执行以下命令，以下载vcpkg。
git clone https://github.com/microsoft/vcpkg.git 如果你没有git，打开上述命令中的网址，点击&amp;quot;Code&amp;quot;-&amp;ldquo;Download ZIP&amp;rdquo;，下载后解压即可。
使用vcpkg进行gdal库编译
在vcpkg文件夹的上级目录中，使用命令提示符(cmd)依次执行以下命令。
.\vcpkg\bootstrap-vcpkg.bat .\vcpkg\vcpkg install gdal:x64-windows 接下来，可以喝杯茶、摸会儿鱼，等待编译完成。编译耗时因电脑性能而异，在我的电脑中，耗时42分钟。
查看库文件和头文件
进入vcpkg/installed/x64-windows
bin和lib文件夹中分别存放着适用于Relese模式下的动态库文件(.dll)和静态库（也可能是动态库的导入库）文件(.lib) debug中的bin和lib文件夹分别存放着适用于Debug模式下的动态库文件(.dll)和静态库（也可能是动态库的导入库）文件(.lib) include文件夹中存放着头文件 以上就是基于vcpkg进行gdal库编译的操作过程，本文没有对相关命令进行讲解，更多详细信息请参考vcpkg的GitHub仓库中的README.md。
Visual Studio项目属性设置 打开Visual Studio，创建一个C++空项目，在项目中添加一个.cpp文件。随后，在项目右键菜单中点击“属性”，将弹出如下图所示的“[项目名]属性页”。
在设置项目属性之前，我们可以先将库文件和头文件放到项目文件夹中，这样在后续的项目设置中，就可以尽量使用相对路径。这样做的好处是，当我们将整个项目打包，放到其他电脑中打开时，就不用修改项目属性了。
在解决方案目录下新建一个名为&amp;quot;gdal&amp;quot;的文件夹 将vcpkg/installed/x64-windows下的bin、debug、include、lib文件夹拷贝至刚刚新建的gdal文件夹中 接下来我们正式开始进行项目属性设置（以Debug配置为例）
设置附加包含目录 - 告知编译器头文件的所在目录
在&amp;quot;C/C++&amp;quot;-&amp;ldquo;常规&amp;rdquo;-&amp;ldquo;附加包含目录&amp;quot;中填写$(SolutionDir)gdal\include
设置附加库目录 - 告知编译器.lib库文件的所在目录
在&amp;quot;链接器&amp;rdquo;-&amp;ldquo;常规&amp;rdquo;-&amp;ldquo;附加库目录&amp;quot;中填写$(SolutionDir)gdal\debug\lib
设置环境 - 告知编译器.dll库文件的所在目录
在&amp;quot;调试&amp;rdquo;-&amp;ldquo;环境&amp;quot;中填写Path = $(SolutionDir)gdal\debug\bin
设置附加依赖项 - 告知编译器要链接的库文件
在&amp;quot;链接器&amp;rdquo;-&amp;ldquo;输入&amp;rdquo;-&amp;ldquo;附加依赖项&amp;quot;中填写gdald.lib
最后点击确定，项目属性设置完毕。
测试 在main.cpp文件中输入如下代码，注意要将第7行中的文件路径改成你自己的，第13行中的函数实参也要做相应的修改。
#include &amp;lt;ogrsf_frmts.h&amp;gt; #include &amp;lt;iostream&amp;gt; using namespace std; int main() { GDALAllRegister();	// 自动注册所有驱动，只能读不能写 GDALDataset* poDS = static_cast&amp;lt;GDALDataset*&amp;gt;(GDALOpenEx( &amp;#34;.</description>
    </item>
  </channel>
</rss>
