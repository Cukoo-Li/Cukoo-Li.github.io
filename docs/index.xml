<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cukoo&#39;s Blog</title>
    <link>https://cukoohhh.cn/</link>
    <description>Recent content on Cukoo&#39;s Blog</description>
    <image>
      <title>Cukoo&#39;s Blog</title>
      <url>https://cukoohhh.cn/images/papermod-cover.png</url>
      <link>https://cukoohhh.cn/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 17 Feb 2024 02:17:18 +0800</lastBuildDate>
    <atom:link href="https://cukoohhh.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gdal C&#43;&#43;开发环境搭建</title>
      <link>https://cukoohhh.cn/posts/gdal-c&#43;&#43;%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 17 Feb 2024 02:17:18 +0800</pubDate>
      <guid>https://cukoohhh.cn/posts/gdal-c&#43;&#43;%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>前言 在开发中，我们经常会使用到第三方库，以避免造轮子，从而提高开发效率。在C++中使用第三方库，首先需要进行以下步骤：
获取库文件和头文件 告知编译器头文件的所在目录 告知编译器库文件的所在目录 告知编译器要链接的库文件 对于某些第三方开源库，官方并没有提供编译好的库文件，此时就需要自己动手编译，得到适用于自己平台下的库文件。
出于毕业要求的需要，我前段时间写了一个软著，其中某些功能的实现需要用到gdal。而gdal就属于上述所说的“需要自己动手编译”的开源库，当然你也可以去寻找别人已经编译好的库文件。
搭建使用第三方库的C++开发环境的核心原理是固定的，也就是上述提到的4个步骤，但具体操作因平台而异。
以下将对“Windows下的gdal开发环境搭建过程”做一个记录，以供自己学习之用，也希望能够帮到有需要的人。
基于vcpkg的gdal库编译 vcpkg是微软推出的开源的C/C++库管理器，它能够自动为我们处理库编译所需的各种依赖关系，就像是Python中的miniconda。
下载vcpkg
使用git-bash中执行以下命令，以下载vcpkg。
git clone https://github.com/microsoft/vcpkg.git 如果你没有git，打开上述命令中的网址，点击&amp;quot;Code&amp;quot;-&amp;ldquo;Download ZIP&amp;rdquo;，下载后解压即可。
使用vcpkg进行gdal库编译
在vcpkg文件夹的上级目录中，使用命令提示符(cmd)依次执行以下命令。
.\vcpkg\bootstrap-vcpkg.bat .\vcpkg\vcpkg install gdal:x64-windows 接下来，可以喝杯茶、摸会儿鱼，等待编译完成。编译耗时因电脑性能而异，在我的电脑中，耗时42分钟。
查看库文件和头文件
进入vcpkg/installed/x64-windows
bin和lib文件夹中分别存放着适用于Relese模式下的动态库文件(.dll)和静态库文件(.lib) debug中的bin和lib文件夹分别存放着适用于Debug模式下的动态库文件(.dll)和静态库文件(.lib) include文件夹中存放着头文件 以上就是基于vcpkg进行gdal库编译的操作过程，本文没有对相关命令进行讲解，更多详细信息请参考vcpkg的GitHub仓库中的README.md。
Visual Studio项目属性设置 打开Visual Studio，创建一个C++空项目，在项目中添加一个.cpp文件。随后，在项目右键菜单中点击“属性”，将弹出如下图所示的“[项目名]属性页”。
在设置项目属性之前，我们可以先将库文件和头文件放到项目文件夹中，这样在后续的项目设置中，就可以尽量使用相对路径。这样做的好处是，当我们将整个项目打包，放到其他电脑中打开时，就不用修改项目属性了。
在解决方案目录下新建一个名为&amp;quot;gdal&amp;quot;的文件夹
将vcpkg/installed/x64-windows下的bin、debug、include、lib文件夹拷贝至刚刚新建的gdal文件夹中
接下来我们正式开始进行项目属性设置（以Debug配置为例）
设置附加包含目录 - 告知编译器头文件的所在目录
在&amp;quot;C/C++&amp;quot;-&amp;ldquo;常规&amp;rdquo;-&amp;ldquo;附加包含目录&amp;quot;中填写$(SolutionDir)gdal\include
设置附加库目录 - 告知编译器.lib库文件的所在目录
在&amp;quot;链接器&amp;rdquo;-&amp;ldquo;常规&amp;rdquo;-&amp;ldquo;附加库目录&amp;quot;中填写$(SolutionDir)gdal\debug\lib
设置环境 - 告知编译器.dll库文件的所在目录
在&amp;quot;调试&amp;rdquo;-&amp;ldquo;环境&amp;quot;中填写Path = $(SolutionDir)gdal\debug\bin
设置附加依赖项 - 告知编译器要链接的库文件
在&amp;quot;链接器&amp;rdquo;-&amp;ldquo;输入&amp;rdquo;-&amp;ldquo;附加依赖项&amp;quot;中填写gdald.lib
最后点击确定，项目属性设置完毕。
测试 在main.cpp文件中输入如下代码，注意要将第7行中的文件路径改成你自己的，第13行中的函数实参也要做相应的修改。
#include &amp;#34;ogrsf_frmts.h&amp;#34; #include &amp;lt;iostream&amp;gt; using namespace std; int main() { GDALAllRegister();	// 自动注册所有驱动，只能读不能写 GDALDataset* poDS = static_cast&amp;lt;GDALDataset*&amp;gt;(GDALOpenEx( &amp;#34;.</description>
    </item>
  </channel>
</rss>
