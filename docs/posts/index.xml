<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>文章 on Cukoo&#39;s Blog</title>
    <link>https://cukoohhh.cn/posts/</link>
    <description>Recent content in 文章 on Cukoo&#39;s Blog</description>
    <image>
      <title>Cukoo&#39;s Blog</title>
      <url>https://cukoohhh.cn/images/papermod-cover.png</url>
      <link>https://cukoohhh.cn/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 20 Mar 2024 12:06:34 +0800</lastBuildDate>
    <atom:link href="https://cukoohhh.cn/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>tinyhttpd程序逻辑总结</title>
      <link>https://cukoohhh.cn/posts/tinyhttpd%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 20 Mar 2024 12:06:34 +0800</pubDate>
      <guid>https://cukoohhh.cn/posts/tinyhttpd%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91%E6%80%BB%E7%BB%93/</guid>
      <description>tinyhttpd是一个非常简易的HTTP服务器程序，适合Linux服务器编程入门学习。从中不仅可以学习到HTTP服务器对一个HTTP请求的响应过程，还能熟悉一些最基本的Linux网络编程api的使用方法。
以下是我对tinyhttpd程序逻辑的简单总结，可以对照公开的源码进行阅读（推荐详细注释版），在阅读之前读者应该了解计算机网络以及Linux服务器编程的基本知识。
程序主要工作流程 服务器启动，在某个端口绑定httpd服务，等待HTTP请求（main建立监听socket） 收到一个HTTP请求时（监听socket被accept后得到一个连接socket），对它进行处理（执行accept_request函数） 解析HTTP请求报文的请求行，从中提取出method和url，根据两者的内容执行相应的业务逻辑 对于GET方法，解析url，获取客户所请求的文件路径path。如果path是一个目录，则追加&amp;quot;index.html&amp;quot;，表示访问主页。如果path不存在，则报错返回。否则，如果path存在且不是可执行文件，就将该文件封装成响应报文发送给客户（文件基本信息作为首部行，文件内容作为实体主体），跳到最后一步 对于POST方法以及“GET一个可执行文件”，后续将执行cgi业务逻辑 执行cgi业务逻辑 建立两个单向管道用于进程间通信 创建子进程 在子进程中，首先将标准输入输出分别重定向到输入管道的读端和输出管道的写端，然后设置环境变量，执行cgi脚本文件 在父进程中，首先，如果有必要，通过管道将请求行后面的内容发送给子进程。然后，将子进程通过管道发来的数据发送给客户 关闭连接socket，完成对一次HTTP请求的响应。 重要函数解读 main 设定服务端口号 创建监听socket（详细工作交由startup函数完成） 循环阻塞等待客户连接 一旦收到客户连接（accept成功返回一个连接socket），就处理它（详细工作交由accept_request函数完成） 程序退出前关闭监听socket startup 该函数的主要工作是创建一个监听socket，并将其返回给main
创建一个使用TCP协议的socket（通过调用socket函数，指定协议族和服务类型） 设定socket地址结构（涉及通过地址转换函数完成主机字节序到网络字节序的转换） 给socket命名，也就是给刚刚创建好的socket绑定一个socket地址（通过调用bind函数，端口号已由main给出） 如果main给出的端口号为0，即bind中指定的socket地址端口号为0，系统会随机选择一个临时端口号。在这种情况下，我们需要知道系统给监听socket实际分配的端口号是多少（通过getsockname获取，注意要进行字节序转换） 调用listen函数，让命名后的socket变为监听socket（系统会创建一个监听队列以存放待处理的客户连接） 返回监听socket accept_request 该函数的主要工作是处理一个HTTP请求。由于该服务器程序实现的是非持续连接的HTTP，即每个HTTP请求都对应一次连接，因此该函数实际上是在处理一个连接socket。
解析HTTP请求报文的请求行，获取method以及url（通过调用自定义函数get_line，从连接socket中读取一行，进而处理字符序列）
根据method和url中的信息，明确这个HTTP请求需要执行cgi程序还是仅索要文件
POST
需要执行cgi程序，将cgi标志变量(cgi)置1。
GET
解析url，获取请求的路径(path)。（url中&#39;?&#39;后面的字符串表示请求的路径）
path是一个目录（以&#39;/&#39;结尾），就拼接上&amp;quot;index.html&amp;quot;，使其变成文件 path是一个文件或目录，就查询path所表示的文件或目录是否存在（利用stat函数）： 不存在，就把该HTTP请求的后续内容读完并忽略，然后返回一个表示“找不到文件”的相应报文给客户（详细工作交由not_found函数完成） 存在，就考察它究竟是一个目录还是一个文件（利用st_mode） 是目录，就拼接上&amp;quot;index.html&amp;quot;，使其变成文件 是可执行文件，需要调用cgi程序，将cgi置1 根据cgi的值，发送文件(serve_file)或执行cig程序(execute_cgi)
关闭连接socket
execute_cgi 该函数的主要工作是进行cgi业务逻辑，该过程涉及创建子进程、利用管道进行进程间通信、执行cgi脚本文件。
如果请求方法是GET，就读取并忽略请求行后面的所有内容（实际上请求行后面的内容只有首部行，因为没有实体主体） 如果请求方法是POST，在首部行中寻找表示实体主体长度的字段，并记录实体主体长度（如果没有给出长度，则报错返回） 给客户发送响应报文中状态行内容(send + &amp;quot;HTTP/1.0 200 OK\r\n&amp;quot;) 创建两个单向管道(cgi_output和cgi_input)，用于进程间通信(pipe) 创建子进程(fork) 子进程将执行cgi脚本 关闭cgi_output[0]和cgi_input[1]，因为子进程不使用这两端 将标准输入重定向到输出管道的写端，这样一来，子进程输出的内容就会直接写到输出管道的写端 将标准输入重定向到输入管道的读端，这样一来，子进程输入的内容就来自输入管道的读端 设置环境变量 执行cgi脚本文件(execl) 父进程作为连接socket和子进程之间I/O的中介 关闭cgi_output[1]和cgi_input[0]，因为父进程不使用这两端 如果请求方法是POST，则继续读取实体主体中的内容，并写到cgi_input[1]，让子进程去读 从cgi_output[0]中读取子进程的输出，并将其发送给客户 关闭管道，并等待子进程退出 （完）</description>
    </item>
    <item>
      <title>手写shared_ptr</title>
      <link>https://cukoohhh.cn/posts/%E6%89%8B%E5%86%99shared-ptr/</link>
      <pubDate>Mon, 11 Mar 2024 23:07:08 +0800</pubDate>
      <guid>https://cukoohhh.cn/posts/%E6%89%8B%E5%86%99shared-ptr/</guid>
      <description>手写shared_ptr是面试的常考点，提前准备一下吧。
shared_ptr的关键特性 首先明确shared_ptr的关键特性：
允许多个shared_ptr指向同一个对象 每个shared_ptr都有一个关联的引用计数，用于记录总共有多少个shared_ptr指向相同的对象 一旦一个shared_ptr所关联的引用计数变为0，它就会自动释放自己所管理的对象 代码思路 显然，最关键的就是要实现引用计数这个机制，大致思路如下：
在堆中创建一个整型对象作为引用计数 在拷贝或赋值时修改引用计数 在析构函数中递减引用计数，并考察它是否变为0，如果变为0，则释放所指向的对象以及引用计数对象 代码实现 #include &amp;lt;iostream&amp;gt; template &amp;lt;typename T&amp;gt; class TinySharedPtr { public: // 构造函数 explicit TinySharedPtr(T* ptr = nullptr) : ptr_(ptr) { if (ptr_) count_ = new int(1); } // 拷贝构造函数 TinySharedPtr(const TinySharedPtr&amp;amp; other) : ptr_(other.ptr_), count_(other.count_) { if (count_) ++*count_; } // 拷贝赋值运算符 TinySharedPtr&amp;amp; operator=(TinySharedPtr other) { std::swap(ptr_, other.ptr_); std::swap(count_, other.count_); return *this; } // 析构函数 ~TinySharedPtr() { if (count_ &amp;amp;&amp;amp; --(*count_) == 0) { delete ptr_; delete count_; } } T* get() { return ptr_; } T* operator-&amp;gt;() { return ptr_; } T&amp;amp; operator*() { return *ptr_; } int use_count() { return count_ ?</description>
    </item>
    <item>
      <title>常见的内部排序算法总结</title>
      <link>https://cukoohhh.cn/posts/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 26 Feb 2024 16:32:19 +0800</pubDate>
      <guid>https://cukoohhh.cn/posts/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>内部排序算法是面试中的常考点，其中快速排序和归并排序是重点。
以下是我对常见的内部排序算法的简单总结，仅供自己复习之用，不涉及详细的算法讲解。
插入排序 插入排序是一种简单直观的排序方法，其基本思想是每次将一个待排序的元素按其关键字大小插入到前面已排好序的子表中，直到全部元素插入完成。
由插入排序的思想可以引申出三个重要的排序算法：直接插入排序、折半插入排序、希尔排序。
直接插入排序 算法思想
初始时将第一个元素视为已排好序的子表，然后依次将后面的元素插入到已排好序的子表中。
算法实现
void StraightInsertionSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) { // 将各元素插入到前面排好序的子表中 for (int i = 1; i &amp;lt; nums.size(); ++i) { int temp = nums[i]; int j; // 前面排好序的子表中比待插入元素大的都要向后挪一个位置 for (j = i - 1; j &amp;gt;= 0 &amp;amp;&amp;amp; nums[j] &amp;gt; temp; --j) nums[j + 1] = nums[j]; // 将待插入元素复制到插入位置 nums[j + 1] = temp; } } 算法分析
空间复杂度$O(1)$ 时间复杂度$O(n^2)$ 稳定性：稳定 折半插入排序 算法思想
当排序表是顺序表时，可以对直接插入排序算法做如下改进：使用折半查找来确定待插入位置，然后再统一地向后移动元素。
算法实现
void BinaryInsertionSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) { for (int i = 1; i &amp;lt; nums.</description>
    </item>
    <item>
      <title>gdal C&#43;&#43;开发环境搭建</title>
      <link>https://cukoohhh.cn/posts/gdal-c&#43;&#43;%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 17 Feb 2024 02:17:18 +0800</pubDate>
      <guid>https://cukoohhh.cn/posts/gdal-c&#43;&#43;%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>前言 在开发中，我们经常会使用到第三方库，以避免造轮子，从而提高开发效率。在C++中使用第三方库，首先需要进行以下步骤：
获取库文件和头文件 告知编译器头文件的所在目录 告知编译器库文件的所在目录 告知编译器要链接的库文件 库文件的获取主要有两种方式：
库厂商有提供库文件，自行选择所需版本下载即可 库厂商没有提供库文件，但开放了源代码，此时就需要自己根据源代码进行编译，得到所需的库文件 所有的库文件都提供有相应的头文件作为调用它的接口。换言之，我们在拿到库文件的同时，也拿到了头文件。
搭建使用第三方库的C++开发环境的核心步骤是固定的，也就是上述提到的4个步骤，但具体操作因平台和开发工具而异。
前段时间一直忙于软著的开发，其中涉及到了gdal库的调用。以下将分享我个人在搭建gdal C++开发环境时所做的记录，希望能够帮到有需要的人。
基于vcpkg的gdal库编译 vcpkg是微软推出的开源的C/C++库管理器，它能够自动为我们处理库编译所需的各种依赖关系，就像是Python中的miniconda。
下载vcpkg
使用git-bash中执行以下命令，以下载vcpkg。
git clone https://github.com/microsoft/vcpkg.git 如果你没有git，打开上述命令中的网址，点击&amp;quot;Code&amp;quot;-&amp;ldquo;Download ZIP&amp;rdquo;，下载后解压即可。
使用vcpkg进行gdal库编译
在vcpkg文件夹的上级目录中，使用命令提示符(cmd)依次执行以下命令。
.\vcpkg\bootstrap-vcpkg.bat .\vcpkg\vcpkg install gdal:x64-windows 接下来，可以喝杯茶、摸会儿鱼，等待编译完成。编译耗时因电脑性能而异，在我的电脑中，耗时42分钟。
查看库文件和头文件
进入vcpkg/installed/x64-windows
bin和lib文件夹中分别存放着适用于Relese模式下的动态库文件(.dll)和静态库（也可能是动态库的导入库）文件(.lib) debug中的bin和lib文件夹分别存放着适用于Debug模式下的动态库文件(.dll)和静态库（也可能是动态库的导入库）文件(.lib) include文件夹中存放着头文件 以上就是基于vcpkg进行gdal库编译的操作过程，本文没有对相关命令进行讲解，更多详细信息请参考vcpkg的GitHub仓库中的README.md。
Visual Studio项目属性设置 打开Visual Studio，创建一个C++空项目，在项目中添加一个.cpp文件。随后，在项目右键菜单中点击“属性”，将弹出如下图所示的“[项目名]属性页”。
在设置项目属性之前，我们可以先将库文件和头文件放到项目文件夹中，这样在后续的项目设置中，就可以尽量使用相对路径。这样做的好处是，当我们将整个项目打包，放到其他电脑中打开时，就不用修改项目属性了。
在解决方案目录下新建一个名为&amp;quot;gdal&amp;quot;的文件夹 将vcpkg/installed/x64-windows下的bin、debug、include、lib文件夹拷贝至刚刚新建的gdal文件夹中 接下来我们正式开始进行项目属性设置（以Debug配置为例）
设置附加包含目录 - 告知编译器头文件的所在目录
在&amp;quot;C/C++&amp;quot;-&amp;ldquo;常规&amp;rdquo;-&amp;ldquo;附加包含目录&amp;quot;中填写$(SolutionDir)gdal\include
设置附加库目录 - 告知编译器.lib库文件的所在目录
在&amp;quot;链接器&amp;rdquo;-&amp;ldquo;常规&amp;rdquo;-&amp;ldquo;附加库目录&amp;quot;中填写$(SolutionDir)gdal\debug\lib
设置环境 - 告知编译器.dll库文件的所在目录
在&amp;quot;调试&amp;rdquo;-&amp;ldquo;环境&amp;quot;中填写Path = $(SolutionDir)gdal\debug\bin
设置附加依赖项 - 告知编译器要链接的库文件
在&amp;quot;链接器&amp;rdquo;-&amp;ldquo;输入&amp;rdquo;-&amp;ldquo;附加依赖项&amp;quot;中填写gdald.lib
最后点击确定，项目属性设置完毕。
测试 在main.cpp文件中输入如下代码，注意要将第7行中的文件路径改成你自己的，第13行中的函数实参也要做相应的修改。
#include &amp;lt;ogrsf_frmts.h&amp;gt; #include &amp;lt;iostream&amp;gt; using namespace std; int main() { GDALAllRegister();	// 自动注册所有驱动，只能读不能写 GDALDataset* poDS = static_cast&amp;lt;GDALDataset*&amp;gt;(GDALOpenEx( &amp;#34;.</description>
    </item>
  </channel>
</rss>
